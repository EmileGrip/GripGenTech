from rest_framework.response import Response
from rest_framework.views import exception_handler
from rest_framework.status import HTTP_403_FORBIDDEN, HTTP_400_BAD_REQUEST , HTTP_401_UNAUTHORIZED
import logging

def core_exception_handler(exc, context):
    # If an exception is thrown that we don't explicitly handle here, we want
    # to delegate to the default exception handler offered by DRF. If we do
    # handle this exception type, we will still want access to the response
    # generated by DRF, so we get that response up front.
    response = exception_handler(exc, context)
    handlers = {
        'ValidationError': _handle_generic_error,
        'PermissionDenied': _permission_denied,
        'AuthenticationFailed':_auth_failed,
        'NotAuthenticated':_permission_denied,
    }
    # This is how we identify the type of the current exception. We will use
    # this in a moment to see whether we should handle this exception or let
    # Django REST Framework do its thing.
    exception_class = exc.__class__.__name__

    if exception_class in handlers:
        # If this exception is one that we can handle, handle it. Otherwise,
        # return the response generated earlier by the default exception 
        # handler.
        return handlers[exception_class](exc, context, response)

    return response

def _handle_generic_error(exc, context, response):
    message= ParseExcMessage(exc)
    response.data =  {
        'success':False,
        'message': "validation error : {}".format(message)
        }
    return response

def _permission_denied(exc,context,response):
    logging.error("the exc is {} and context is {} and response is {} and code {}".format(exc,context,response,HTTP_400_BAD_REQUEST))

    response.data = {
        'success':False,
        'message': "you don't have permissions to do this operation"
        }
    return response

def _auth_failed(exc,context,response):
    logging.error("the exc is {} and context is {} and response is {} and code {}".format(exc,context,response,HTTP_400_BAD_REQUEST))

    response.data = {
        'success':False,
        'message': str(exc)
        }
    return response

def ParseExcMessage(exc):
    try:
        details = exc.get_full_details()
    except AttributeError:
        details = exc.detail

    detailString = ""
    for key in details.keys():
        if key != "non_field_errors":
            detailString += key + " : "
        for error in details[key]:
            if 'message' in error:
                detailString += error['message'].title() + "\n"
            elif 'non_field_errors' in error and isinstance(error['non_field_errors'], list):
                for non_field_error in error['non_field_errors']:
                    if 'message' in non_field_error:
                        detailString += non_field_error['message'].title() + "\n"
                    else:
                        detailString += str(non_field_error) + "\n"
            else:
                detailString += str(error) + "\n"
        detailString += "\n"

    return detailString